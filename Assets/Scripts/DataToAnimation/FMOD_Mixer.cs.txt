using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UTB.Data;

public class FMOD_Mixer : DataBasedModifier
{
    public float MinMixerValue = 0.0f;
    public float MaxMixerValue = 1.0f;

    [FMODUnity.EventRef]
    public string NarrationAudioEvent = "";
    FMOD.Studio.EventInstance backgroundEvent;

    [Range(0, 1)]
    public float mixer;
    FMOD.Studio.PARAMETER_ID MixerID;


    public FMOD_Mixer()
    {
        DataProperty = BayDataProperties.Oxygen;
        MinPropertyValue = 0.0f;
        NormalRange = new Vector2(0.0f, 1.0f);
        MaxPropertyValue = 10.0f;
    }



    // Start is called before the first frame update
    void Start()
    {

        backgroundEvent = FMODUnity.RuntimeManager.CreateInstance(NarrationAudioEvent);
        backgroundEvent.start();



        FMOD.Studio.EventDescription mixerEventDescription;
        backgroundEvent.getDescription(out mixerEventDescription);
        FMOD.Studio.PARAMETER_DESCRIPTION mixerParameterDescription;
        mixerEventDescription.getParameterDescriptionByName("Mixer", out mixerParameterDescription);
        MixerID = mixerParameterDescription.id;

    }

    // Update is called once per frame
    void FixedUpdate()
    {
        var data = DataContainer.instance.CurrentSample;

        var value = GetReflectedField<float, BayData, BayDataProperties>(data, DataProperty);
#if UNITY_EDITOR
        if (EnableOverride)
            value = OverrideValue;
#endif

        float t = (value - MinPropertyValue) / (MaxPropertyValue - MinPropertyValue);

        mixer = Mathf.Lerp(MaxMixerValue, MinMixerValue, t);

        backgroundEvent.setParameterByID(MixerID, mixer);
    }

    private void OnDestroy()
    {
        backgroundEvent.stop(FMOD.Studio.STOP_MODE.ALLOWFADEOUT);
    }

    protected override void ApplyDefaultValues()
    {
        throw new System.NotImplementedException();
    }

    protected override void ApplyModification(float value, float t)
    {
        throw new System.NotImplementedException();
    }
}
